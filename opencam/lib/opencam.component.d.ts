import { OnInit, EventEmitter, OnDestroy } from '@angular/core';
import { ISourceDevice, ECaptureType, EStreamState, EMediaConstraints } from './opencam.models';
import { Observable } from 'rxjs';
export declare class OpencamComponent implements OnInit, OnDestroy {
    captureEvent: EventEmitter<any>;
    videoSourceEvent: EventEmitter<ISourceDevice[]>;
    audioSourceEvent: EventEmitter<ISourceDevice[]>;
    errorEvent: EventEmitter<Error>;
    framerate: number;
    private _framerate;
    videoSource: ISourceDevice;
    private _videoSource;
    audioSource: ISourceDevice;
    private _audioSource;
    display: string;
    width: string;
    _width: string;
    height: string;
    _height: string;
    capture: Observable<number>;
    private _capture;
    captureType: ECaptureType;
    private _captureType;
    streamState: EStreamState;
    private _streamState;
    mediaConstraints: EMediaConstraints;
    private _mediaConstraints;
    filters: string;
    private _filters;
    video: HTMLVideoElement;
    canvas: any;
    ctx: CanvasRenderingContext2D;
    private videoSources;
    private audioSources;
    private currentVideoSource;
    private currentAudioSource;
    private rafId;
    private stream;
    private constraints;
    isStreamLoading: boolean;
    isStreamInProgress: boolean;
    isRecording: boolean;
    isScanCompleted: boolean;
    recorder: any;
    frames: string[];
    constructor();
    ngOnInit(): void;
    initOpenCam(): void;
    scanCaptureDevices(): void;
    sourceHandler(): void;
    captureHandler(c: any): void;
    errorHandler(e: any): void;
    private handleCaptureDevices;
    private initStream;
    getAudioStream(): MediaStream;
    private startRecording;
    extractRecording(e: any): void;
    private stopRecording;
    private drawToCanvas;
    private captureStreamShot;
    stopStream(): boolean;
    ngOnDestroy(): void;
}
